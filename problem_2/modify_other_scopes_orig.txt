The program edit_employees.c allows users to edit employee information.
However, the edit_employees function needs to be passed a non-zero value 
for the second parameter in order for the user to be allowed to edit salaries.
Let's see if we can get around that restriction and change salaries anyway.

Notice that this program avoids scanf, and uses strncpy so as to avoid string
buffer overflows.


1. Draw a diagram of the stack contents when the program reachesthe switch 
   statement for the first time.

2. Even though string buffer overflows aren't possible, it is still possible
   to change an employee's salary.  Can you figure out how? 
   * Hint #1: Look at the stack trace and carefully choose an "employee" to modify.
   * Hint #2: It can be difficult to account for alignment on the stack. The "dummy" 
     variables message1 and message2 will help you adjust your attack to account for
     alignment .

3. Notice that line 92 says  "if (can_edit_salary >= 1)".  If the line were written
   "if (can_edit_salary == 1)" --- which it probably should be -- could you still 
   make your attack work?

4. Notice that this code uses my_strncpy to copy strings.
   a. How does my_strncppy differ from the clib's strncpy?
   b. How does this difference affect the outcome of your attack?

5. If your compiler includes stack protection, modify an "employee" in a way 
   that trips this alarm and causes the program to be terminated.

Answers:

1. See below

2. Edit employee "-1". Editing this employee will modify the local variables in 
   edit_employees.

3. Yes, but you would probably have to pipe the input into the program as we did in 
   the previous problem.

4a. clib's strncpy will fill the remaining bytes in the target array with 0s.
4b. This thwarts our attack because the extra 0s end up overwriting the function's 
    return address and/or stack check, resulting in a seg fault.

=====

Answer to #1 when compiled using clang on an x86 mac.
Notice that the placement of parameters on the stack  is not in the order they appear in the code.
The idea of the "dummy" data was to help students see what parts of the stack were modified.  However,
since the parameters weren't placed in order, these "guideposts" may not be as useful as I had hoped.


stack    addr as shown
         in assembly 
   0                         rsp when entering main 
  -8                         rbp pushed to begin main / rbp for main
 -16     main -8(rbp)        stack check for main 
                             employees[2]
                             employees[1]
                             employees[0]
-232     main -224(rbp)      Beginning of employee array
         main -228(rbp)      0
         main -232(rbp)      argc   
-248     main -240(rbp)      argv / rsp after setting up main
-256                         return address for edit_employees function ("edit")
-264                         rbp pushed to begin edit_employees / rbp for "edit"
-272       edit -8(rbp)      stack check for "edit"
-280      edit -16(rbp)      message1 
-288      edit -24(rbp)      message2
-296      edit -32(rbp)      Employee* variable
-300      edit -36(rbp)      choice variable
-304      edit -40(rbp)      emp_num variable 
-320      edit -56(rbp)      Employee array pointer parameter
-324      edit -60(rbp)      can_edit_salary parameter
-328      edit -64(rbp)      rsp after setting up edit_employees  

=====

Answer to #1 when compiled using gcc on an x86 running Linux
Notice that the placement of parameters on the stack  is not in the order they appear in the code.
The idea of the "dummy" data was to help students see what parts of the stack were modified.  However,
since the parameters weren't placed in order, these "guideposts" may not be as useful as I had hoped.


stack    addr as shown
         in assembly 
   0                         rsp when entering main 
  -8                         rbp pushed to begin main / rbp for main
 -16     main -8(rbp)        stack check for main 
                             employees[2]
                             employees[1]
                             employees[0]
-232     main -224(rbp)      Beginning of employee array
         main -228(rbp)      argc
    
-248     main -240(rbp)      argv / rsp after setting up main
-256                         return address for edit_employees function ("edit")
-264                         rbp pushed to begin edit_employees / rbp for "edit"
-272        edit -8(rbp)      stack check for "edit"
-280       edit -16(rbp)      message2 
-288       edit -24(rbp)      message1
-296       edit -32(rbp)      Employee array pointer parameter
-300       edit -36(rbp)      can_edit_salary parameter
           edit -40(rbp)      emp_num
           edit -56(rbp)      emp Employee*
           edit -60(rbp)      choice
-328      edit -64(rbp)      rsp after setting up edit_employees  