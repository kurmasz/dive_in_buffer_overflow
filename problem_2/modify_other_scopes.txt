The program array_underflow.c allows users to edit employee information.
However, the edit_employees function needs to be passed non-zero values 
for can_edit_record and can_edit_salary in order for the user to be allowed
to edit salaries. Let's see if we can get around that restriction and change
salaries anyway.

Notice that this program avoids scanf, and uses strncpy so as to avoid string
buffer overflows.

1. Draw a diagram of the stack contents when the program reaches the switch 
   statement for the first time.

2. Even though string buffer overflows aren't possible, it is still possible
   to change an employee's salary.  Can you figure out how? 
   * Hint: Look at the stack trace and carefully choose an "employee" to modify.

3. Notice that this code uses my_strncpy to copy strings.
   a. How does my_strncppy differ from the clib's strncpy?
   b. How does this difference affect the outcome of your attack?

4. If your compiler includes stack protection, modify an "employee" in a way 
   that trips this alarm and causes the program to be terminated.

Answers:

1. See below

2. * For x86/gcc (I used a Linux box)
     Edit employee "-1". Editing this employee will modify the local variables in 
     edit_employees. In particular, edit the name and change character 21.
     * If the "hint" printfs on lines 96 and 97 are uncommented, edit the name 
       and change character 8. (I don't know why adding these lines changes how 
       data is allocated on the stack.)
   * For the M1 (the ARM processor in newer Macs) and clang
     Edit employee "-2".  Editing this employee will modify the local variables in 
     edit_employees. In particular, edit the title and change character 5.


3a. clib's strncpy will fill the remaining bytes in the target array with 0s.
3b. This thwarts our attack because the extra 0s end up overwriting the function's 
    return address and/or stack check, resulting in a seg fault.

=====

Answer to #1 when compiled using gcc on an x86 running Linux **with the extra printf commented out**.
Assembly generated using gcc -Wall -O0 -g -S array_underflow_gcc.c with gcc version 11.4.0 (Ubuntu 11.4.0-1ubuntu1~22.04) 

Notice that the placement of parameters on the stack  is not in the order they appear in the code.
The compiler puts an unknown amount of padding on the stack between main and edit_employees. I tried to 
determine this padding by adding some extra printfs; but, the presence of the printfs changed the padding.
In addition, uncommenting the "helper" printfs on lines 96 and 97 causes the compiler to add a canary
to edit_employees.  (It's not there if those two lines are commented out.)


stack    addr as shown
         in assembly 
   0                         rsp when entering main 
  -8                         rbp pushed to begin main / rbp for main
 -16     main  -8(rbp)       stack check for main 
         main -24(rbp)       <appears to be unused>
                             employees[2]
                             employees[1]
                             employees[0]
-232     main -224(rbp)      Beginning of employee array
         main -228(rbp)      argc
         main -232(rbb)      <appears to be unused>   
-248     main -240(rbp)      argv / rsp after setting up main
-256                         return address for edit_employees function (aka "edit")
-264                         rbp pushed to begin edit_employees / rbp for "edit"
-272      edit  -8(rbp)      emp (local variable)
-276      edit -12(rbp)      choice (local variable)
-280      edit -16(rbp)      both_permissions (local variable)
-284      edit -20(rbp)      emp_num (local variable)
-296    	 edit -32(rbp)      <apparently unused>
-300 ***  edit -36(rbp)      can_edit_record parameter
-304      edit -40(rbp)      can_edit_salary parameter
-312      edit -48(rbp)      Employee* employees / rsp after setting up edit_employees  

*** Location of "employee[-1]" if no padding on stack between methods.

=====

Answer to #1 when compiled using clang on an M1 running MacOS with the extra printf commented out. 
(Although, that doesn't appear to matter on this platform.)
Assembly generated using gcc -Wall -O0 -g -S array_underflow_gcc.c with Apple clang version 15.0.0 (clang-1500.0.40.1)

Notice that the placement of parameters on the stack  is not in the order they appear in the code.
The compiler puts an unknown amount of padding on the stack between main and edit_employees. I tried to 
determine this padding by adding some extra printfs; but, the presence of the printfs changed the padding.
In addition, uncommenting the "helper" printfs on lines 96 and 97 causes the compiler to add a canary
to edit_employees.  (It's not there if those two lines are commented out.)


stack    addr as shown
         in assembly 
   0                        sp when entering main 
         main 280(sp)       Preserve x30 (Return address)
         main 272(sp)       Preserve x29 (Frame pointer)
         main 264(sp)       Preserve x28 
         main 256(sp)       Preserve x27
         main 248(sp)       <apparently unused>
-244     main 44(sp)        Base of employee array
         main 40(sp)        Store 0
         main 36(sp)        Store argc (w0)
         main 32(sp)        <apparently unused>
         main 24(sp)        Store argv (x1)
         main 16(sp)        Store location of Employees (sp + 44)
         main 12(sp)        Initialized to 0 (later passed as 2nd parameter to edit_employees)
         main 0(sp)         <apparently unused 12 bytes>
 -288                       sp after entering main
                           # sp <== sp - 80 upon entry
         edit  72(sp)      Preserve x30 (Return address)
         edit  64(sp)      Preserve x29 (Frame pointer) (This is also what the fp is set to for edit_employees)
         edit -4(x29)      can_edit_record    (equal to 60(sp))
 ***     edit -8(x29)      can_edit_salary    (equal to 56(sp))
        edit -16(x29)      Employee* employee (equal to 48(sp))
    	  edit -20(x29)      emp_num            (equal to 44(sp))
          edit 40(sp)      <apparently unused>
          edit 32(sp)      emp local variable (??)
          edit 28(sp)      both_permissions 
          edit 24(sp)      choice
          edit  0(sp)      <apparently unused 12 bytes>
  -368                     sp after entering edit_employee (if no extra space) 
       
*** Location of "employee[-1]" **if** no stack alignment/padding. 
However, there appears to be blank space in the stack (alignment? protection?)
because, when we un-comment lines 96 and 97, we see that the beginning of 
"employee[-1] is actually 28 _below_ the location of can_edit_salary.