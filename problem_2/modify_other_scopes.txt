The program edit_employees allows users to edit employee information.
However, the edit_employees function needs to be passed a non-zero value 
for the second parameter in order for the user to be allowed to edit salaries.

Notice that this program avoids scanf, and uses strncpy so as to avoid string
buffer overflows.


1. Draw a diagram of the stack contents when the program reaches line 92
   (the switch statement) for the first time.

2. Even though string buffer overflows aren't possible, it is still possible
   to change an employee's salary.  Can you figure out how? 
   * Hint #1: Look at the stack trace and carefully choose an "employee" to modify.
   * Hint #2: It can be difficult to account for alignment on the stack. The "dummy" 
     variables message1 and message2 will help you adjust your attack to account for
     alignment .

3. Notice that line 86 says  "if (can_edit_salary >= 1)".  If the line were written
   "if (can_edit_salary == 1)" --- which it probably should be -- could you still 
   make your attack work?

4. Notice that this code uses my_strncpy to copy strings.
   a. How does my_strncppy differ from the clib's strncpy?
   b. How does this difference affect the outcome of your attack?


Answers:

1.  <I have to figure out how to present this neatly.>


2. Edit employee "-1". Editing this employee will modify the local variables in 
   edit_employees.

3. Yes, but you would probably have to pipe the input into the program as we did in 
   the previous problem.

4a. clib's strncpy will fill the remaining bytes in the target array with 0s.
4b. This thwarts our attack because the extra 0s end up overwriting the function's 
    return address, resulting in a seg fault.